============================= test session starts ==============================
platform darwin -- Python 3.12.2, pytest-8.1.0, pluggy-1.4.0
rootdir: /Users/sidchaini/Research/DistClassiPy
configfile: pyproject.toml
plugins: hypothesis-6.100.7, anyio-4.3.0, cov-4.1.0
collected 71 items

tests/test_classifier.py .................                               [ 23%]
tests/test_distances.py .F....F.FF.F.FFFFF.F....F.FF.F.FF.F..F....F.FF.F [ 91%]
FFF.F.                                                                   [100%]

=================================== FAILURES ===================================
________________________ test_non_negative[braycurtis] _________________________

metric = 'braycurtis'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'braycurtis', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert nan >= 0
E        +  where nan = <bound method Distance.braycurtis of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.braycurtis of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'braycurtis')
E       Falsifying example: test_non_negative(
E           metric='braycurtis',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:55: AssertionError
________________________ test_non_negative[correlation] ________________________

metric = 'correlation'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'correlation', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert nan >= 0
E        +  where nan = <bound method Distance.correlation of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.correlation of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'correlation')
E       Falsifying example: test_non_negative(
E           metric='correlation',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:55: AssertionError
_________________________ test_non_negative[hellinger] _________________________

metric = 'hellinger'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'hellinger', data = (array([0.]), array([-1.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert nan >= 0
E        +  where nan = <bound method Distance.hellinger of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([-1.]))
E        +    where <bound method Distance.hellinger of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'hellinger')
E       Falsifying example: test_non_negative(
E           metric='hellinger',
E           data=(array([0.0]), array([-1.0])),
E       )

tests/test_distances.py:55: AssertionError
__________________________ test_non_negative[jaccard] __________________________

metric = 'jaccard'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'jaccard', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert nan >= 0
E        +  where nan = <bound method Distance.jaccard of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.jaccard of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'jaccard')
E       Falsifying example: test_non_negative(
E           metric='jaccard',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:55: AssertionError
______________________ test_non_negative[marylandbridge] _______________________

metric = 'marylandbridge'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'marylandbridge', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert nan >= 0
E        +  where nan = <bound method Distance.marylandbridge of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.marylandbridge of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'marylandbridge')
E       Falsifying example: test_non_negative(
E           metric='marylandbridge',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:55: AssertionError
__________________________ test_non_negative[motyka] ___________________________

metric = 'motyka'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'motyka', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert nan >= 0
E        +  where nan = <bound method Distance.motyka of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.motyka of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'motyka')
E       Falsifying example: test_non_negative(
E           metric='motyka',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:55: AssertionError
__________________________ test_non_negative[soergel] __________________________

metric = 'soergel'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'soergel', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert nan >= 0
E        +  where nan = <bound method Distance.soergel of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.soergel of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'soergel')
E       Falsifying example: test_non_negative(
E           metric='soergel',
E           data=(array([0.0]), array([0.0])),
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:949

tests/test_distances.py:55: AssertionError
________________________ test_non_negative[wave_hedges] ________________________

metric = 'wave_hedges'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'wave_hedges'
data = (array([ 0.,  0.,  0., -1.]), array([ 0.,  0.,  0., -2.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert -1.0 >= 0
E        +  where -1.0 = <bound method Distance.wave_hedges of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([ 0.,  0.,  0., -1.]), array([ 0.,  0.,  0., -2.]))
E        +    where <bound method Distance.wave_hedges of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'wave_hedges')
E       Falsifying example: test_non_negative(
E           metric='wave_hedges',
E           data=(array([0.0, 0.0, 0.0, -1.0]), array([0.0, 0.0, 0.0, -2.0])),
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/_ufunc_config.py:114
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/_ufunc_config.py:120
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:942
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:943
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:944
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:949

tests/test_distances.py:55: AssertionError
________________________ test_non_negative[kulczynski] _________________________

metric = 'kulczynski'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'kulczynski', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert nan >= 0
E        +  where nan = <bound method Distance.kulczynski of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.kulczynski of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'kulczynski')
E       Falsifying example: test_non_negative(
E           metric='kulczynski',
E           data=(array([0.0]), array([0.0])),
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:949

tests/test_distances.py:55: AssertionError
_________________________ test_non_negative[add_chisq] _________________________

metric = 'add_chisq'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'add_chisq', data = (array([0., 1.]), array([ 0. , -0.5]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_non_negative(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) >= 0
E       AssertionError: assert -2.25 >= 0
E        +  where -2.25 = <bound method Distance.add_chisq of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0., 1.]), array([ 0. , -0.5]))
E        +    where <bound method Distance.add_chisq of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'add_chisq')
E       Falsifying example: test_non_negative(
E           metric='add_chisq',
E           data=(array([0.0, 1.0]), array([0.0, -0.5])),
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/_ufunc_config.py:114
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/_ufunc_config.py:120
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:942
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:943
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:944
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:949

tests/test_distances.py:55: AssertionError
________________________ test_self_distance[braycurtis] ________________________

metric = 'braycurtis'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'braycurtis', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_self_distance(metric, data):
        u, _ = data
>       assert getattr(distance, metric)(u, u) == 0
E       AssertionError: assert nan == 0
E        +  where nan = <bound method Distance.braycurtis of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.braycurtis of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'braycurtis')
E       Falsifying example: test_self_distance(
E           metric='braycurtis',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:62: AssertionError
_______________________ test_self_distance[correlation] ________________________

metric = 'correlation'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'correlation', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_self_distance(metric, data):
        u, _ = data
>       assert getattr(distance, metric)(u, u) == 0
E       AssertionError: assert nan == 0
E        +  where nan = <bound method Distance.correlation of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.correlation of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'correlation')
E       Falsifying example: test_self_distance(
E           metric='correlation',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:62: AssertionError
________________________ test_self_distance[hellinger] _________________________

metric = 'hellinger'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'hellinger', data = (array([-1.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_self_distance(metric, data):
        u, _ = data
>       assert getattr(distance, metric)(u, u) == 0
E       AssertionError: assert nan == 0
E        +  where nan = <bound method Distance.hellinger of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([-1.]), array([-1.]))
E        +    where <bound method Distance.hellinger of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'hellinger')
E       Falsifying example: test_self_distance(
E           metric='hellinger',
E           data=(array([-1.0]), array([0.0])),
E       )

tests/test_distances.py:62: AssertionError
_________________________ test_self_distance[jaccard] __________________________

metric = 'jaccard'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'jaccard', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_self_distance(metric, data):
        u, _ = data
>       assert getattr(distance, metric)(u, u) == 0
E       AssertionError: assert nan == 0
E        +  where nan = <bound method Distance.jaccard of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.jaccard of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'jaccard')
E       Falsifying example: test_self_distance(
E           metric='jaccard',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:62: AssertionError
______________________ test_self_distance[marylandbridge] ______________________

metric = 'marylandbridge'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'marylandbridge', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_self_distance(metric, data):
        u, _ = data
>       assert getattr(distance, metric)(u, u) == 0
E       AssertionError: assert nan == 0
E        +  where nan = <bound method Distance.marylandbridge of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.marylandbridge of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'marylandbridge')
E       Falsifying example: test_self_distance(
E           metric='marylandbridge',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:62: AssertionError
__________________________ test_self_distance[motyka] __________________________

metric = 'motyka'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'motyka', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_self_distance(metric, data):
        u, _ = data
>       assert getattr(distance, metric)(u, u) == 0
E       AssertionError: assert nan == 0
E        +  where nan = <bound method Distance.motyka of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.motyka of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'motyka')
E       Falsifying example: test_self_distance(
E           metric='motyka',
E           data=(array([0.0]), array([0.0])),  # or any other generated value
E       )

tests/test_distances.py:62: AssertionError
_________________________ test_self_distance[soergel] __________________________

metric = 'soergel'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'soergel', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_self_distance(metric, data):
        u, _ = data
>       assert getattr(distance, metric)(u, u) == 0
E       AssertionError: assert nan == 0
E        +  where nan = <bound method Distance.soergel of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.soergel of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'soergel')
E       Falsifying example: test_self_distance(
E           metric='soergel',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:62: AssertionError
________________________ test_self_distance[kulczynski] ________________________

metric = 'kulczynski'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'kulczynski', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_self_distance(metric, data):
        u, _ = data
>       assert getattr(distance, metric)(u, u) == 0
E       AssertionError: assert nan == 0
E        +  where nan = <bound method Distance.kulczynski of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.kulczynski of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'kulczynski')
E       Falsifying example: test_self_distance(
E           metric='kulczynski',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:62: AssertionError
__________________________ test_symmetry[braycurtis] ___________________________

metric = 'braycurtis'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'braycurtis', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_symmetry(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) == getattr(distance, metric)(v, u)
E       AssertionError: assert nan == nan
E        +  where nan = <bound method Distance.braycurtis of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.braycurtis of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'braycurtis')
E        +  and   nan = <bound method Distance.braycurtis of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.braycurtis of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'braycurtis')
E       Falsifying example: test_symmetry(
E           metric='braycurtis',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:69: AssertionError
__________________________ test_symmetry[correlation] __________________________

metric = 'correlation'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'correlation', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_symmetry(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) == getattr(distance, metric)(v, u)
E       AssertionError: assert nan == nan
E        +  where nan = <bound method Distance.correlation of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.correlation of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'correlation')
E        +  and   nan = <bound method Distance.correlation of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.correlation of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'correlation')
E       Falsifying example: test_symmetry(
E           metric='correlation',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:69: AssertionError
___________________________ test_symmetry[hellinger] ___________________________

metric = 'hellinger'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'hellinger', data = (array([0.]), array([-1.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_symmetry(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) == getattr(distance, metric)(v, u)
E       AssertionError: assert nan == nan
E        +  where nan = <bound method Distance.hellinger of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([-1.]))
E        +    where <bound method Distance.hellinger of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'hellinger')
E        +  and   nan = <bound method Distance.hellinger of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([-1.]), array([0.]))
E        +    where <bound method Distance.hellinger of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'hellinger')
E       Falsifying example: test_symmetry(
E           metric='hellinger',
E           data=(array([0.0]), array([-1.0])),
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:942
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:943

tests/test_distances.py:69: AssertionError
____________________________ test_symmetry[jaccard] ____________________________

metric = 'jaccard'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'jaccard', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_symmetry(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) == getattr(distance, metric)(v, u)
E       AssertionError: assert nan == nan
E        +  where nan = <bound method Distance.jaccard of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.jaccard of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'jaccard')
E        +  and   nan = <bound method Distance.jaccard of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.jaccard of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'jaccard')
E       Falsifying example: test_symmetry(
E           metric='jaccard',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:69: AssertionError
________________________ test_symmetry[marylandbridge] _________________________

metric = 'marylandbridge'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'marylandbridge', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_symmetry(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) == getattr(distance, metric)(v, u)
E       AssertionError: assert nan == nan
E        +  where nan = <bound method Distance.marylandbridge of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.marylandbridge of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'marylandbridge')
E        +  and   nan = <bound method Distance.marylandbridge of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.marylandbridge of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'marylandbridge')
E       Falsifying example: test_symmetry(
E           metric='marylandbridge',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:69: AssertionError
_____________________________ test_symmetry[meehl] _____________________________

metric = 'meehl'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'meehl'
data = (array([0., 0., 0., 0., 0., 0., 1.]), array([1.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 9.00720033e+15]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_symmetry(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) == getattr(distance, metric)(v, u)
E       AssertionError: assert 8.112965775742091e+31 == 8.112965775742095e+31
E        +  where 8.112965775742091e+31 = <bound method Distance.meehl of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0., 0., 0., 0., 0., 0., 1.]), array([1.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 9.00720033e+15]))
E        +    where <bound method Distance.meehl of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'meehl')
E        +  and   8.112965775742095e+31 = <bound method Distance.meehl of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([1.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 9.00720033e+15]), array([0., 0., 0., 0., 0., 0., 1.]))
E        +    where <bound method Distance.meehl of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'meehl')
E       Falsifying example: test_symmetry(
E           metric='meehl',
E           data=(array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]),
E            array([1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9007200328482816.0])),
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/_ufunc_config.py:114
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/_ufunc_config.py:120
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:942
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:943
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:944
E               /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/arrayprint.py:949

tests/test_distances.py:69: AssertionError
____________________________ test_symmetry[motyka] _____________________________

metric = 'motyka'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'motyka', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_symmetry(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) == getattr(distance, metric)(v, u)
E       AssertionError: assert nan == nan
E        +  where nan = <bound method Distance.motyka of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.motyka of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'motyka')
E        +  and   nan = <bound method Distance.motyka of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.motyka of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'motyka')
E       Falsifying example: test_symmetry(
E           metric='motyka',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:69: AssertionError
____________________________ test_symmetry[soergel] ____________________________

metric = 'soergel'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'soergel', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_symmetry(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) == getattr(distance, metric)(v, u)
E       AssertionError: assert nan == nan
E        +  where nan = <bound method Distance.soergel of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.soergel of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'soergel')
E        +  and   nan = <bound method Distance.soergel of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.soergel of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'soergel')
E       Falsifying example: test_symmetry(
E           metric='soergel',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:69: AssertionError
__________________________ test_symmetry[kulczynski] ___________________________

metric = 'kulczynski'

    @pytest.mark.parametrize("metric", all_metrics)
>   @given(arrays)

tests/test_distances.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

metric = 'kulczynski', data = (array([0.]), array([0.]))

    @pytest.mark.parametrize("metric", all_metrics)
    @given(arrays)
    def test_symmetry(metric, data):
        u, v = data
>       assert getattr(distance, metric)(u, v) == getattr(distance, metric)(v, u)
E       AssertionError: assert nan == nan
E        +  where nan = <bound method Distance.kulczynski of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.kulczynski of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'kulczynski')
E        +  and   nan = <bound method Distance.kulczynski of <distclassipy.distances.Distance object at 0x166ccaea0>>(array([0.]), array([0.]))
E        +    where <bound method Distance.kulczynski of <distclassipy.distances.Distance object at 0x166ccaea0>> = getattr(<distclassipy.distances.Distance object at 0x166ccaea0>, 'kulczynski')
E       Falsifying example: test_symmetry(
E           metric='kulczynski',
E           data=(array([0.0]), array([0.0])),
E       )

tests/test_distances.py:69: AssertionError
=============================== warnings summary ===============================
tests/test_classifier.py: 10 warnings
  /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/_methods.py:206: RuntimeWarning: Degrees of freedom <= 0 for slice
    ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

tests/test_classifier.py: 10 warnings
  /Users/sidchaini/miniconda3/lib/python3.12/site-packages/numpy/core/_methods.py:195: RuntimeWarning: invalid value encountered in divide
    ret = um.true_divide(

tests/test_distances.py::test_non_negative[braycurtis]
tests/test_distances.py::test_non_negative[braycurtis]
tests/test_distances.py::test_non_negative[braycurtis]
tests/test_distances.py::test_self_distance[braycurtis]
tests/test_distances.py::test_self_distance[braycurtis]
tests/test_distances.py::test_self_distance[braycurtis]
tests/test_distances.py::test_symmetry[braycurtis]
tests/test_distances.py::test_symmetry[braycurtis]
tests/test_distances.py::test_symmetry[braycurtis]
  /Users/sidchaini/miniconda3/lib/python3.12/site-packages/scipy/spatial/distance.py:1129: RuntimeWarning: invalid value encountered in scalar divide
    return l1_diff.sum() / l1_sum.sum()

tests/test_distances.py: 34 warnings
  /Users/sidchaini/miniconda3/lib/python3.12/site-packages/scipy/spatial/distance.py:647: RuntimeWarning: invalid value encountered in scalar divide
    dist = 1.0 - uv / math.sqrt(uu * vv)

tests/test_distances.py: 36 warnings
  /Users/sidchaini/Research/DistClassiPy/distclassipy/distances.py:337: RuntimeWarning: invalid value encountered in sqrt
    return np.sqrt(2 * np.sum((np.sqrt(u) - np.sqrt(v)) ** 2))

tests/test_distances.py::test_non_negative[jaccard]
tests/test_distances.py::test_non_negative[jaccard]
tests/test_distances.py::test_non_negative[jaccard]
tests/test_distances.py::test_self_distance[jaccard]
tests/test_distances.py::test_self_distance[jaccard]
tests/test_distances.py::test_self_distance[jaccard]
tests/test_distances.py::test_symmetry[jaccard]
tests/test_distances.py::test_symmetry[jaccard]
tests/test_distances.py::test_symmetry[jaccard]
  /Users/sidchaini/Research/DistClassiPy/distclassipy/distances.py:361: RuntimeWarning: invalid value encountered in scalar divide
    return 1 - (uv / (np.dot(u, u) + np.dot(v, v) - uv))

tests/test_distances.py::test_non_negative[marylandbridge]
tests/test_distances.py::test_non_negative[marylandbridge]
tests/test_distances.py::test_non_negative[marylandbridge]
tests/test_distances.py::test_self_distance[marylandbridge]
tests/test_distances.py::test_self_distance[marylandbridge]
tests/test_distances.py::test_self_distance[marylandbridge]
tests/test_distances.py::test_symmetry[marylandbridge]
tests/test_distances.py::test_symmetry[marylandbridge]
tests/test_distances.py::test_symmetry[marylandbridge]
  /Users/sidchaini/Research/DistClassiPy/distclassipy/distances.py:407: RuntimeWarning: invalid value encountered in scalar divide
    return 1 - (uvdot / np.dot(u, u) + uvdot / np.dot(v, v)) / 2

tests/test_distances.py: 10 warnings
  /Users/sidchaini/Research/DistClassiPy/distclassipy/distances.py:463: RuntimeWarning: invalid value encountered in scalar divide
    return np.sum(np.maximum(u, v)) / np.sum(u + v)

tests/test_distances.py::test_non_negative[soergel]
tests/test_distances.py::test_non_negative[soergel]
tests/test_distances.py::test_non_negative[soergel]
tests/test_distances.py::test_self_distance[soergel]
tests/test_distances.py::test_self_distance[soergel]
tests/test_distances.py::test_self_distance[soergel]
tests/test_distances.py::test_symmetry[soergel]
tests/test_distances.py::test_symmetry[soergel]
tests/test_distances.py::test_symmetry[soergel]
  /Users/sidchaini/Research/DistClassiPy/distclassipy/distances.py:488: RuntimeWarning: invalid value encountered in scalar divide
    return np.sum(np.abs(u - v)) / np.sum(np.maximum(u, v))

tests/test_distances.py::test_non_negative[kulczynski]
tests/test_distances.py::test_non_negative[kulczynski]
tests/test_distances.py::test_non_negative[kulczynski]
tests/test_distances.py::test_self_distance[kulczynski]
tests/test_distances.py::test_self_distance[kulczynski]
tests/test_distances.py::test_self_distance[kulczynski]
tests/test_distances.py::test_symmetry[kulczynski]
tests/test_distances.py::test_symmetry[kulczynski]
tests/test_distances.py::test_symmetry[kulczynski]
  /Users/sidchaini/Research/DistClassiPy/distclassipy/distances.py:533: RuntimeWarning: invalid value encountered in scalar divide
    return np.sum(np.abs(u - v)) / np.sum(np.minimum(u, v))

tests/test_distances.py::test_non_negative[kulczynski]
  /Users/sidchaini/Research/DistClassiPy/distclassipy/distances.py:533: RuntimeWarning: divide by zero encountered in scalar divide
    return np.sum(np.abs(u - v)) / np.sum(np.minimum(u, v))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform darwin, python 3.12.2-final-0 ----------
Coverage XML written to file coverage.xml

=========================== short test summary info ============================
FAILED tests/test_distances.py::test_non_negative[braycurtis] - AssertionErro...
FAILED tests/test_distances.py::test_non_negative[correlation] - AssertionErr...
FAILED tests/test_distances.py::test_non_negative[hellinger] - AssertionError...
FAILED tests/test_distances.py::test_non_negative[jaccard] - AssertionError: ...
FAILED tests/test_distances.py::test_non_negative[marylandbridge] - Assertion...
FAILED tests/test_distances.py::test_non_negative[motyka] - AssertionError: a...
FAILED tests/test_distances.py::test_non_negative[soergel] - AssertionError: ...
FAILED tests/test_distances.py::test_non_negative[wave_hedges] - AssertionErr...
FAILED tests/test_distances.py::test_non_negative[kulczynski] - AssertionErro...
FAILED tests/test_distances.py::test_non_negative[add_chisq] - AssertionError...
FAILED tests/test_distances.py::test_self_distance[braycurtis] - AssertionErr...
FAILED tests/test_distances.py::test_self_distance[correlation] - AssertionEr...
FAILED tests/test_distances.py::test_self_distance[hellinger] - AssertionErro...
FAILED tests/test_distances.py::test_self_distance[jaccard] - AssertionError:...
FAILED tests/test_distances.py::test_self_distance[marylandbridge] - Assertio...
FAILED tests/test_distances.py::test_self_distance[motyka] - AssertionError: ...
FAILED tests/test_distances.py::test_self_distance[soergel] - AssertionError:...
FAILED tests/test_distances.py::test_self_distance[kulczynski] - AssertionErr...
FAILED tests/test_distances.py::test_symmetry[braycurtis] - AssertionError: a...
FAILED tests/test_distances.py::test_symmetry[correlation] - AssertionError: ...
FAILED tests/test_distances.py::test_symmetry[hellinger] - AssertionError: as...
FAILED tests/test_distances.py::test_symmetry[jaccard] - AssertionError: asse...
FAILED tests/test_distances.py::test_symmetry[marylandbridge] - AssertionErro...
FAILED tests/test_distances.py::test_symmetry[meehl] - AssertionError: assert...
FAILED tests/test_distances.py::test_symmetry[motyka] - AssertionError: asser...
FAILED tests/test_distances.py::test_symmetry[soergel] - AssertionError: asse...
FAILED tests/test_distances.py::test_symmetry[kulczynski] - AssertionError: a...
================= 27 failed, 44 passed, 146 warnings in 26.89s =================
